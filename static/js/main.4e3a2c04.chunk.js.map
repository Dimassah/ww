{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","index.js"],"names":["Info","Form","props","onSubmit","weatherMethod","type","name","placeholder","Weather","className","city","country","temp","sunrise","sunset","pressure","error","API_KEY","App","state","undefined","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","sys","date","Date","setTime","sunrise_date","getHours","getMinutes","getSeconds","sunset_date","console","log","setState","main","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"4RASeA,EAPF,kBACT,6BACI,6IACA,4LCIOC,EAPF,SAAAC,GAAK,OACd,0BAAMC,SAAUD,EAAME,eAClB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,8EAC3C,2HCcOC,EAjBC,SAAAN,GAAK,OACb,yBAAKO,UAAU,aACVP,EAAMQ,MACP,6BACI,oHAAoBR,EAAMQ,KAA1B,IAAiCR,EAAMS,QAAvC,KACA,kGAAiBT,EAAMU,KAAvB,SACA,oEAAYV,EAAMW,SAClB,8DAAWX,EAAMY,QACjB,gFAAcZ,EAAMa,WAK5B,uBAAGN,UAAU,SAAUP,EAAMc,SCV/BC,EAAU,mCAyFDC,E,2MApFbC,MAAQ,CACNP,UAAMQ,EACNV,UAAMU,EACNT,aAASS,EACTP,aAASO,EACTN,YAAQM,EACRL,cAAUK,EACVJ,WAAOI,G,EAGTC,e,uCAAiB,WAAOC,GAAP,6BAAAC,EAAA,yDACfD,EAAEE,mBACEd,EAAOY,EAAEG,OAAOC,SAAShB,KAAKiB,OAFnB,iCAOXC,MAAM,yFAAD,OAA0FlB,EAA1F,kBAAwGO,EAAxG,kBAPM,cAMPY,EANO,gBAQMA,EAAQC,OARd,OAQPC,EARO,OAUTlB,EAAUkB,EAAKC,IAAInB,SACrBoB,EAAO,IAAIC,MACRC,QAAQtB,GACTuB,EAAeH,EAAKI,WAAa,IAAMJ,EAAKK,aAAe,IAAML,EAAKM,aAEtEzB,EAASiB,EAAKC,IAAIlB,OACtBmB,EAAKE,QAAQrB,GACT0B,EAAcP,EAAKI,WAAa,IAAMJ,EAAKK,aAAe,IAAML,EAAKM,aAIzEE,QAAQC,IAAIX,GACZ,EAAKY,SAAS,CACZ/B,KAAMmB,EAAKa,KAAKhC,KAChBF,KAAMqB,EAAKzB,KACXK,QAASoB,EAAKC,IAAIrB,QAClBE,QAASuB,EACTtB,OAAQ0B,EACRzB,SAAUgB,EAAKa,KAAK7B,SACpBC,WAAOI,IA7BI,wBAgCb,EAAKuB,SAAS,CACZ/B,UAAMQ,EACNV,UAAMU,EACNT,aAASS,EACTP,aAASO,EACTN,YAAQM,EACRL,cAAUK,EACVJ,MAAO,qIAvCI,4C,8HA4Cf,OACE,yBAAKP,UAAU,WACb,yBAAKA,UAAU,QACf,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACX,yBAAKA,UAAU,iBACf,kBAAC,EAAD,OAEA,yBAAKA,UAAU,iBACf,kBAAC,EAAD,CAAML,cAAeyC,KAAKxB,iBAC1B,kBAAC,EAAD,CACET,KAAMiC,KAAK1B,MAAMP,KACjBF,KAAMmC,KAAK1B,MAAMT,KACjBC,QAASkC,KAAK1B,MAAMR,QACpBE,QAASgC,KAAK1B,MAAMN,QACpBC,OAAQ+B,KAAK1B,MAAML,OACnBC,SAAU8B,KAAK1B,MAAMJ,SACrBC,MAAO6B,KAAK1B,MAAMH,iB,GAzEhB8B,IAAMC,W,kBCDxBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.4e3a2c04.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Info = () => (\n    <div>\n        <h2>Погодное приложение</h2>\n        <h6>Узнайте погоду в Вашем городе</h6>       \n    </div>\n)\n\nexport default Info;","import React from \"react\";\n\nconst Form = props => (\n    <form onSubmit={props.weatherMethod}>\n        <input type=\"text\" name=\"city\" placeholder=\"Введите город\"/>\n        <button>Получить погоду</button>\n    </form>\n)\n\nexport default Form;","import React from \"react\";\n\nconst Weather = props => (\n        <div className=\"infoWeath\">\n            {props.city &&\n            <div>\n                <p>Местоположение: {props.city},{props.country} </p>\n                <p>Температура: {props.temp}&deg;C</p>\n                <p>Восход: {props.sunrise}</p>\n                <p>Заход: {props.sunset}</p>\n                <p>Давление: {props.pressure}</p>\n\n            </div>\n        }\n        \n        <p className=\"error\">{ props.error }</p>\n        </div>\n    );\n\nexport default Weather;","import React from \"react\";\nimport Info from \"./components/info\";\nimport Form from \"./components/form\";\nimport Weather from \"./components/weather\";\n\nconst API_KEY = \"849711d1fde9b02e90766651918752f1\";\n\n\nclass App extends React.Component {\n\n  state = {\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    sunrise: undefined,\n    sunset: undefined,\n    pressure: undefined,\n    error: undefined\n  }\n\n  gettingWeather = async (e) => {\n    e.preventDefault();\n    let city = e.target.elements.city.value;\n\n\n    if (city) {\n      const api_url = await\n        fetch(`https://cors-anywhere.herokuapp.com/https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n      const data = await api_url.json();\n\n      let sunrise = data.sys.sunrise,\n        date = new Date()\n      date.setTime(sunrise);\n      let sunrise_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds()\n\n      let sunset = data.sys.sunset\n      date.setTime(sunset);\n      let sunset_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n\n\n\n      console.log(data);\n      this.setState({\n        temp: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        sunrise: sunrise_date,\n        sunset: sunset_date,\n        pressure: data.main.pressure,\n        error: undefined\n      });\n    } else {\n      this.setState({\n        temp: undefined,\n        city: undefined,\n        country: undefined,\n        sunrise: undefined,\n        sunset: undefined,\n        pressure: undefined,\n        error: \"Введите название города\"\n      });\n    }\n  }\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"main\">\n        <div className=\"container\">\n          <div className=\"row\">\n              <div className=\"col-xl-6 info\">\n              <Info />\n              </div>\n              <div className=\"col-xl-6 form\"> \n              <Form weatherMethod={this.gettingWeather} />\n              <Weather\n                temp={this.state.temp}\n                city={this.state.city}\n                country={this.state.country}\n                sunrise={this.state.sunrise}\n                sunset={this.state.sunset}\n                pressure={this.state.pressure}\n                error={this.state.error}\n              />\n              </div>\n          </div>\n          </div>\n        </div>\n        \n\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}